# CLion remote docker environment (How to build docker container, run and stop it)
#
# Build and run:
#   docker build -t puzzzzzzle/clion_remote:0.3 -f Dockerfile.clion_remote .
#   docker run -d --cap-add sys_ptrace -p 30022:22 --name clion_remote_dev puzzzzzzle/clion_remote
#
# stop:
#   docker stop clion_remote_env
#
# ssh credentials (test user):
#   user@password

FROM ubuntu:22.04

RUN DEBIAN_FRONTEND="noninteractive" apt-get update && apt-get -y install tzdata

RUN apt-get update \
  && apt-get install -y ssh \
      \
      gcc-12 \
      g++-12 \
      build-essential \
      nasm \
      python3 \
      python3-pip \
      libgtest-dev \
      libboost-all-dev \
      \
      gdb \
      clang \
      make \
      ninja-build \
      cmake \
      autoconf \
      automake \
      locales-all \
      dos2unix \
      rsync \
      tar \
      git \
      curl \
      zip \
      unzip \
  && apt-get clean \
  && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12 \
  && pip3 install conan

# build libunifex
RUN cd /tmp \
        && git clone https://github.com/facebookexperimental/libunifex.git \
        && cd libunifex \
        && cmake -G Ninja -H. -Bbuild -DCMAKE_CXX_STANDARD:STRING=20 -DCMAKE_INSTALL_PREFIX=/usr \
        && cd build \
        && ninja \
        && ninja install \
        && cd /tmp && rm -rf libunifex

# build libgo
# not support c20
# RUN cd /tmp \
#         && git clone https://github.com/yyzybb537/libgo.git \
#         && cd libgo \
#         && mkdir build \
#         && cd build \
#         && cmake .. -DCMAKE_INSTALL_PREFIX=/usr \
#         && make -j `cat /proc/cpuinfo |grep "cores"|uniq|awk '{print $4}' \
#         && make install \
#         && cd /tmp && rm -rf libgo

# build vcpkg
# RUN cd /tmp \
#         && git clone https://github.com/Microsoft/vcpkg.git \
#         && cd vcpkg \
#         && ./bootstrap-vcpkg.sh -disableMetrics \
#         && cp vcpkg /usr/bin \
#         && cd /tmp && rm -rf vcpkg


RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication yes'; \
    echo 'Subsystem sftp /usr/lib/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion \
  && mkdir /run/sshd

RUN useradd -m user \
  && yes password | passwd user \
  && usermod -s /bin/bash user

EXPOSE 22

CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]